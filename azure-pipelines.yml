trigger:
- master
- feature/*

pool:
  my-pool

variables:
  imageRepository: 'weightapptracker2'
  containerRegistry: 'ACR'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  artifactName: 'manifests'
  imagePullSecret: 'superawesomebrilliantsecret-auth'

stages:

- stage: CI
  jobs:
  - job: BuildAndPushDocker
    steps:
    - task: Docker@2
      displayName: Build an image 
      inputs:
        command: build
        repository: $(imageRepository)
        containerRegistry: 'ACR'
        dockerfile: $(dockerfilePath)
        tags: $(tag)
    - task: Docker@2
      displayName: Push an image to azure container registry
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: 'ACR'
        tags: $(tag)

- stage: Deploy
  displayName: Deploy to Production
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to AKS'
    environment: 'k8.default'
    strategy:
      runOnce: 
        deploy:
          steps:
          
          - task: Docker@2
            inputs:
              containerRegistry: 'ACR'
              command: 'login'
          - task: KubernetesManifest@0
            displayName: Create secret
            inputs: 
              action: createSecret
              secretType: generic
              secretName: app-secrets
              secretArguments: --from-literal=COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) --from-literal=HOST=$(HOST) --from-literal=PORT=$(PORT) --from-literal=NODE_ENV=$(NODE_ENV) --from-literal=HOST_URL=$(HOST_URL) --from-literal=OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) --from-literal=OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) --from-literal=OKTA_ORG_URL=$(OKTA_ORG_URL)  --from-literal=PGHOST=$(PGHOST) --from-literal=PGUSERNAME=$(PGUSERNAME) --from-literal=PGDATABASE=$(PGDATABASE) --from-literal=PGPASSWORD=$(PGPASSWORD)  --from-literal=PGPORT=$(PGPORT)
              kubernetesServiceConnection: k8-appCluster-default-1651949511896
              namespace: default
            

          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              namespace: 'default'
              manifests: |
                Kubernetes/deployment.yml
                Kubernetes/ingress.yml
                Kubernetes/service.yml
                Kubernetes/configmap.yml
              imagePullSecrets: $(imagePullSecret)
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
