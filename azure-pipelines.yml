trigger:
- master
- feature/*

pool:
  my-pool

variables:
  imageRepository: 'weightapptracker2'
  containerRegistry: 'ACR'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'latest'
  artifactName: 'manifests'
  imagePullSecret: 'superawesomebrilliantsecret-auth'

stages:

- stage: CI
  jobs:
  - job: BuildAndPushDocker
    steps:
    - task: Docker@2
      displayName: Build an image 
      inputs:
        command: build
        repository: $(imageRepository)
        containerRegistry: 'ACR'
        dockerfile: $(dockerfilePath)
        tags: $(tag)
    - task: Docker@2
      displayName: Push an image to azure container registry
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: 'ACR'
        tags: $(tag)

- stage: Deploy
  displayName: Deploy to Production
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to AKS'
    environment: 'k8.default'
    strategy:
      runOnce: 
        deploy:
          steps:
          
          - task: Docker@2
            inputs:
              containerRegistry: 'ACR'
              command: 'login'
          
          - script: |
                    kubectl delete secret app-secret
                    kubectl create secret generic app-secret \
                    --from-literal=PORT=80 \
                    --from-literal=HOST=0.0.0.0 \
                    --from-literal=COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) \
                    --from-literal=NODE_ENV=$(NODE_ENV) \
                    --from-literal=HOST_URL=$(HOST_URL) \
                    --from-literal=OKTA_ORG_URL=$(OKTA_ORG_URL) \
                    --from-literal=OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) \
                    --from-literal=OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) \
                    --from-literal=PGHOST=$(PG_HOST) \
                    --from-literal=PGUSERNAME=$(PG_USER) \
                    --from-literal=PGDATABASE=$(PG_USER) \
                    --from-literal=PGPASSWORD=$(PG_PASS) \
                    --from-literal=PGPORT=5432
            displayName: create env
            

          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              namespace: 'default'
              manifests: |
                Kubernetes/deployment.yml
                Kubernetes/ingress.yml
                Kubernetes/service.yml
              imagePullSecrets: $(imagePullSecret)
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
